#version 440
layout(location=0) in vec2 UV;
layout(location=1) in vec3 verticePos;
layout(location=2) in vec4 lightningPosition;
out vec3 Color;
uniform sampler2D diffuseTex;
uniform sampler2D normalTex;
uniform sampler2D specTex;
const vec3 ambientColor = vec3(0.1, 0.1, 0.1);
const vec3 diffuseColor = vec3(0.4, 0.4, 0.4);
const float shininess = 22.0;
uniform float screenGamma = 2.2;
void main()
{
   vec3 specularColor = normalize(texture(specTex, UV).rgb);
   vec3 normal = normalize(texture(normalTex, UV).rgb * 2.0 -1.0);
   vec3 lightDir = normalize(vec3(lightningPosition) - verticePos);
   float lambertian = max(dot(lightDir,normal), 0.0);
   float specular = 0.0f;

   if(lambertian > 0.0)
   {
       vec3 viewDir = normalize(-verticePos);
       vec3 halfDir = normalize(lightDir + viewDir);
       float specAngle = max(dot(halfDir, normal), 0.0);
       specular = pow(specAngle, shininess);
   }
   vec3 colorLinear = ambientColor + lambertian * diffuseColor + specular * specularColor;
   vec3 colorGammaCorrected = pow(colorLinear, vec3(1.0/screenGamma));
   Color = texture(diffuseTex, UV).rgb * (ambientColor + lambertian) * specularColor;
}